buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.2.1'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group 'kr.co.e8ight.auth'
version '1.0-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

repositories {
    maven {
//        url 'http://1.233.183.202:59081/repository/maven-releases/'
        url 'http://172.16.28.217:9081/repository/maven-releases/'
        allowInsecureProtocol = true
        credentials {
            username = "admin"
            password = "ndxpro123!"
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4'

    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.google.guava:guava:11.0.2'
    implementation 'org.modelmapper:modelmapper:2.1.1'


//    jwt token
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.13'

//  database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'
    implementation 'com.vladmihalcea:hibernate-types-52:1.0.0'

//  logging system
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.1'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin:3.1.1'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.0.1'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
//    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
    annotationProcessor('jakarta.persistence:jakarta.persistence-api')
    annotationProcessor('jakarta.annotation:jakarta.annotation-api')

    implementation('org.projectlombok:lombok')
    testImplementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // common
    implementation 'kr.co.e8ight.ndxpro:ndxpro_common:0.0.5'

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

/*compileQuerydsl.doFirst {
    if(file(querydslDir).exists() )
        delete(file(querydslDir))
}*/

test {
    useJUnitPlatform()
}

jib {

    from {
        image = "openjdk:11.0.14-jre-slim"
/*        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
        }*/
    }
    to {
        image = "172.16.28.217:12000/ndxpro-authorization"
        tags = ["v1.1"]
        auth {
            username = "admin"
            password = "ndxpro123!"
        }
    }

    /**
     * 1.3버젼이 사용버젼
     * 1.4버젼 logstash  버젼
     */

    container {
        // 컨테이너가 외부로 노출할 포트이다.
        ports = ['54009']
    }

    setAllowInsecureRegistries(true)
}