plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

group = 'kr.co.e8ight.ndxpro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'junit:junit:4.13.1'
    implementation 'org.projectlombok:lombok:1.18.22'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // ndxpro common
    implementation 'kr.co.e8ight.ndxpro:ndxpro_common:0.0.6'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // jpa annotation
    implementation 'javax.persistence:javax.persistence-api:2.2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

    // eureka
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4'

    // sleuth, zipkin
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.1'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin:3.1.1'

    // logstash
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
}

//tasks.named('test') {
//    useJUnitPlatform()
//}

repositories {
    maven {
        url 'http://172.16.28.217:9081/repository/maven-releases/'
        allowInsecureProtocol = true
        credentials {
            username = "admin"
            password = "ndxpro123!"
        }
    }
}

jib {
    from {
        image = "openjdk:11.0.14-jre-slim"
    }
    to {
        image = "172.16.28.217:12000/ndxpro-dataservice"
        tags = ["v1.1"]
        auth {
            username = "admin"
            password = "ndxpro123!"
        }
    }
    setAllowInsecureRegistries(true)
}

def profiles = 'dev'
bootRun {
    args = ["--spring.profiles.active=" + profiles]
}
